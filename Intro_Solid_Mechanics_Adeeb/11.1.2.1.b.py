from sympy import *
from numpy import *
import sympy as sp 
import numpy as np
import matplotlib.pyplot as plt
sp.init_printing(use_latex = "mathjax")
x, EI, P, q, a0, a1, a2, a3, a4, a5, c1, c2, c3, c4 = symbols("x EI P q a_0 a_1 a_2 a_3 a_4 a_5 c_1 c_2 c_3 c_4")
print("Exact")
y = (q*x**4/24+c1*x**3/6+c2*x**2/2+c3*x+c4)/EI
Eq1 = y.subs(x,0)
Eq2 = y.subs(x,L)
Eq3 = EI * y.diff(x,2).subs(x,0)
Eq4 = EI * y.diff(x,2).subs(x,L)
a = solve((Eq1,Eq2,Eq3,Eq4), (c1,c2,c3,c4))
print("constants: ", a)
y = y.subs({c1:a[c1], c2:a[c2], c3:a[c3], c4:a[c4]})
theta = y.diff(x)
M = EI*y.diff(x,2)
V = EI*y.diff(x,3)
print("y,theta,M,V: ", y,theta,M,V)
print("Second Degree")
y2 = a2*x**2+a1*x+a0
s = solve((y2.subs(x,0), y2.subs(x,L)), (a0, a1))
print("a0, a1", s)
y2 = y2.subs({a0:s[a0], a1:s[a1]})
PE2 = (EI/2)*integrate(y2.diff(x,2)**2, (x,0,L)) - integrate(q*y2, (x,0,L))
print("Potential Energy: ", PE2)
Eq1_2 = PE2.diff(a2)
a = solve(Eq1_2, a2)
y2 = y2.subs(a2,a[0])
theta2 = y2.diff(x)
M2 = EI*y2.diff(x,2)
V2 = EI*y2.diff(x,3)
print("y,theta,M,V: ", y2,theta2,M2,V2)
print("Third Degree")
y3 = a3*x**3+a2*x**2+a1*x+a0
s = solve((y3.subs(x,0), y3.subs(x,L)), (a0, a1))
print("a0, a1", s)
y3 = y3.subs({a0:s[a0], a1:s[a1]})
PE3 = (EI/2)*integrate(y3.diff(x,2)**2, (x,0,L)) - integrate(q*y3, (x,0,L))
print("Potential Energy: ", PE3)
Eq1_3 = PE3.diff(a2)
Eq2_3 = PE3.diff(a3)
a = solve((Eq1_3, Eq2_3), (a2,a3))
y3 = y3.subs({a2:a[a2], a3:a[a3]})
theta3 = y3.diff(x)
M3 = EI*y3.diff(x,2)
V3 = EI*y3.diff(x,3)
print("y,theta,M,V: ", y3,theta3,M3,V3)
print("Fourth Degree")
y4 = a4*x**4+a3*x**3+a2*x**2+a1*x+a0
s = solve((y4.subs(x,0), y4.subs(x,L)), (a0, a1))
print("a0, a1", s)
y4 = y4.subs({a0:s[a0], a1:s[a1]})
PE4 = (EI/2)*integrate(y4.diff(x,2)**2, (x,0,L)) - integrate(q*y4, (x,0,L))
print("Potential Energy: ", PE4)
Eq1_4 = PE4.diff(a2)
Eq2_4 = PE4.diff(a3)
Eq3_4 = PE4.diff(a4)
a = solve((Eq1_4, Eq2_4, Eq3_4), (a2,a3, a4))
y4 = y4.subs({a2:a[a2], a3:a[a3], a4:a[a4]})
theta4 = y4.diff(x)
M4 = EI*y4.diff(x,2)
V4 = EI*y4.diff(x,3)
print("y,theta,M,V: ", y4,theta4,M4,V4)
print("Fifth Degree")
y5 = a5*x**5+a4*x**4+a3*x**3+a2*x**2+a1*x+a0
s = solve((y5.subs(x,0), y5.subs(x,L)), (a0, a1))
print("a0, a1", s)
y5 = y5.subs({a0:s[a0], a1:s[a1]})
PE5 = (EI/2)*integrate(y5.diff(x,2)**2, (x,0,L)) - integrate(q*y5, (x,0,L))
print("Potential Energy: ", PE5)
Eq1_5 = PE5.diff(a2)
Eq2_5 = PE5.diff(a3)
Eq3_5 = PE5.diff(a4)
Eq4_5 = PE5.diff(a5)
a = solve((Eq1_5, Eq2_5, Eq3_5, Eq4_5), (a2,a3,a4,a5))
y5 = y5.subs({a2:a[a2], a3:a[a3], a4:a[a4], a5:a[a5]})
theta5 = y5.diff(x)
M5 = EI*y5.diff(x,2)
V5 = EI*y5.diff(x,3)
print("y,theta,M,V: ", y5,theta5,M5,V5)
# Sub graphed things in
y = y.subs({EI:200000*1000000*4*100000000/1000000000000, L:10, q:-25*100})
y2 = y2.subs({EI:200000*1000000*4*100000000/1000000000000, L:10, q:-25*100})
y4 = y4.subs({EI:200000*1000000*4*100000000/1000000000000, L:10, q:-25*100})
theta = theta.subs({EI:200000*1000000*4*100000000/1000000000000, L:10, q:-25*100})
theta2 = theta2.subs({EI:200000*1000000*4*100000000/1000000000000, L:10, q:-25*100})
theta4 = theta4.subs({EI:200000*1000000*4*100000000/1000000000000, L:10, q:-25*100})
M = M.subs({EI:200000*1000000*4*100000000/1000000000000, L:10, q:-25*100})
M2 = M2.subs({EI:200000*1000000*4*100000000/1000000000000, L:10, q:-25*100})
M4 = M4.subs({EI:200000*1000000*4*100000000/1000000000000, L:10, q:-25*100})
V = V.subs({EI:200000*1000000*4*100000000/1000000000000, L:10, q:-25*100})
V2 = V2.subs({EI:200000*1000000*4*100000000/1000000000000, L:10, q:-25*100})
V4 = V4.subs({EI:200000*1000000*4*100000000/1000000000000, L:10, q:-25*100})
#Graph
fig, ax = plt.subplots(2,2, figsize = (10,6))
plt.setp(ax[0,0], xlabel = "x(m) ", ylabel = "y(m)")
plt.setp(ax[0,1], xlabel = "x(m)", ylabel = "theta")
plt.setp(ax[1,0], xlabel = "x(m)", ylabel = "M(N*m)")
plt.setp(ax[1,1], xlabel = "x(m)", ylabel = "V(N)")
x1 = np.arange(0,10.1,0.1)
y_list = [y.subs({x:i}) for i in x1]
y2_list = [y2.subs({x:i}) for i in x1]
y4_list = [y4.subs({x:i}) for i in x1]
theta_list = [theta.subs({x:i}) for i in x1]
theta2_list = [theta2.subs({x:i}) for i in x1]
theta4_list = [theta4.subs({x:i}) for i in x1]
M_list = [M.subs({x:i}) for i in x1]
M2_list = [M2.subs({x:i}) for i in x1]
M4_list = [M4.subs({x:i}) for i in x1]
V_list = [V.subs({x:i}) for i in x1]
V2_list = [V2.subs({x:i}) for i in x1]
V4_list = [V4.subs({x:i}) for i in x1]
ax[0,0].plot(x1, y_list, 'blue', label = "Exact y")
ax[0,0].plot(x1, y2_list, 'orange', label = "y2")
ax[0,0].plot(x1, y4_list, 'green', label = "y4")
ax[0,0].legend()
ax[0,1].plot(x1, theta_list, 'blue', label = "Exact theta")
ax[0,1].plot(x1, theta2_list, 'orange', label = "theta 2")
ax[0,1].plot(x1, theta4_list, 'green', label = "theta 4")
ax[0,1].legend()
ax[1,0].plot(x1, M_list, 'blue', label = "Exact M")
ax[1,0].plot(x1, M2_list, 'orange', label = "M2")
ax[1,0].plot(x1, M4_list, 'green', label = "M4")
ax[1,0].legend()
ax[1,1].plot(x1, V_list, 'blue', label = "Exact V")
ax[1,1].plot(x1, V2_list, 'orange', label = "V2")
ax[1,1].plot(x1, V4_list, 'green', label = "V4")
ax[1,1].legend()
